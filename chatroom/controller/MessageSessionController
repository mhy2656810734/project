package com.example.demo.controller;

import com.example.demo.config.MyConfig;
import com.example.demo.model.Friend;
import com.example.demo.model.MessageSession;
import com.example.demo.model.User;
import com.example.demo.service.MessageService;
import com.example.demo.service.MessageSessionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.util.ArrayList;
import java.util.List;

/**
 * @author 26568
 * @date 2023-07-08 17:05
 */
@RestController
public class MessageSessionController {
    @Autowired
    private MessageSessionService service;
    @Autowired
    private MessageService messageService;
    @GetMapping("/sessionList")
    public Object getSessionList(HttpServletRequest request) {
        // 1.先验证会话
        List<MessageSession> messageSessionList = new ArrayList<>();
        HttpSession session = request.getSession(false);
        if (session == null) {
            System.out.println("当前用户未登录,session==null");
            return messageSessionList;
        }
        // 2.验证用户信息
        User user = (User)session.getAttribute(MyConfig.USER_INFO);
        if (user == null) {
            System.out.println("当前用户信息不正确!!!!"+user);
            return messageSessionList;
        }
        // 用户信息正确
        // 3.通过当前userId 查询到这个用户在哪些会话中出现过(sessionId)
        List<Integer> sessionIdList = service.getSessionIdList(user.getUserId());
        // 4.遍历这个会话id的集合，查询到这些会话涉及的所有用户，除了自己
        for (Integer sessionId:sessionIdList) {
            // 创建对象，进行参数添加
            MessageSession messageSession = new MessageSession();
            messageSession.setSessionId(sessionId);
            // 根据会话id查到friend
            List<Friend> friends = service.getFriendsById(sessionId, user.getUserId());
            messageSession.setFriends(friends);
            // 4.得到最后一条消息
            // 先根据sessionId查询到最后一条消息
            // 根据会话id可能会查不到数据（新创建的会话可能还没来得及发消息）
            String content = messageService.getLastMessageBySessionId(sessionId);
            if (content != null) {

                messageSession.setLastMessage(content);
            } else {
                // 为空说明还没开始对话
                messageSession.setLastMessage("");
            }
            messageSessionList.add(messageSession);
        }
        return messageSessionList;
    }
}
