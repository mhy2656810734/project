package com.example.demo.controller;

import com.example.demo.config.MyConfig;
import com.example.demo.config.PasswordToos;
import com.example.demo.conponent.CheckCodeTools;
import com.example.demo.model.Code;
import com.example.demo.model.User;
import com.example.demo.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.http.HttpRequest;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;


/**
 * @author 26568
 * @date 2023-07-05 19:49
 */
@RestController
public class UserController {

    @Autowired
    private UserService userService;
    @Autowired
    private CheckCodeTools codeTools;
    // 登录
    @PostMapping("/login")
    public Object selectByName(String username, String password, HttpServletRequest request) {
        // 1.先去数据库查找是否能找到这个username
        // 如果能找到 查看密码是否匹配
        User user = userService.selectByName(username);
        // 对数据库中的密码进行加盐解密
        if (user == null || !PasswordToos.decrypt(password,user.getPassword())) {
            System.out.println("用户名或者密码错误:"+user);
            return  new User();
        }

        // 2.如果都匹配 登录成功，创建会话
        HttpSession session = request.getSession(true);
        session.setAttribute(MyConfig.USER_INFO,user);
        user.setPassword("");
        return user;
    }
    // 注册
    @PostMapping ("/register")
    public Object register(String username,String password) {
        // 1.先创建user对象
        User user = null;
        // 2.插入数据库
        try {
            user = new User();
            user.setUsername(username);
            // 对密码进行加盐加密处理
            String dbPassword = PasswordToos.encrypt(password);
            user.setPassword(dbPassword);
            // 如果用户名重复，会注册失败
            int ret = userService.insert(user);
            user.setPassword("");
            System.out.println("注册结果ret: "+ret);
        } catch (DuplicateKeyException e) {
            // 注册失败 创建空对象
            user = new User();
            System.out.println("注册失败:"+username);
        }
        return user;
    }
    // 主界面查询登录用户的用户信息
    @GetMapping("/getUserInfo")
    public Object getUserInfo(HttpServletRequest request) {
        // 1.先获取到session
        HttpSession session = request.getSession(false);
        if (session == null) {
            System.out.println("当前用户未登录");
            return new User();
        }
        // 2.拿到当前登录用户
        User user = (User)session.getAttribute(MyConfig.USER_INFO);
        if (user == null) {
            System.out.println("[getUserInof] 无法获取到用户信息");
            return new User();
        }
        // 获取到当前用户，但是需要将密码设置为空
        user.setPassword("");
        return user;
    }
    // 验证码
    @RequestMapping("/getCode")
    public Object getCode(HttpServletRequest request) {
        // 得到字符串数组：包括生成的验证码图片的名称以及验证码的文本内容
        String[] codeArr = codeTools.createImage();
        // 将验证码文本内容存储到Session
        HttpSession session = request.getSession(true);
        session.setAttribute(MyConfig.USER_INFO,codeArr[1]);
        // 返回验证码
        Code code = new Code();
        code.setCodeName(codeArr[1]);
        code.setImagePath("/image/"+codeArr[0]);
        return code;
    }
}
