package com.example.demo.config;

import org.springframework.util.DigestUtils;
import org.springframework.util.StringUtils;

import java.nio.charset.StandardCharsets;
import java.util.UUID;

/**
 * 密码工具类
 * 进行加盐加密 或者加盐解密
 * @author 26568
 * @date 2023-07-16 9:41
 */
public class PasswordToos {
    // 加盐加密
    public static String encrypt(String password) {
        // 1.使用UUID生成随机盐值   生成的数字是全球唯一的，共长36字符，四个-连字符  32个有效数字
        String salt = UUID.randomUUID().toString().replace("-",""); // 此时长度为32
        // 2.根据随机盐值 和 初始密码 通过md5 生成加盐加密的密码
        // 字符编码格式UTF8     这里生成的finalPassword长度是22
        String finalPassword = DigestUtils.md5DigestAsHex((salt+password).getBytes(StandardCharsets.UTF_8));
        // 3.将随机盐值+自定义拼接规则+加盐得到的密码一起返回就是最终存入数据库中的密码
        System.out.println("salt+\"$\"+finalPassword".length());
        return salt+"$"+finalPassword;
    }
    // 加盐加密的方法重载
    public static String encrypt(String password,String salt) {
        // 根据传入盐值 和 密码 生成加盐加密密码
        String finalPassword = DigestUtils.md5DigestAsHex((salt+password).getBytes(StandardCharsets.UTF_8));
        return salt+"$"+finalPassword;
    }


    /**
     * 进行加盐解密
     * @param password     待验证的密码
     * @param dbPassword   存入数据库的密码
     * @return
     */
    public static boolean decrypt(String password,String dbPassword) {
        // 1.先进行参数判断   password长度20  $ 1  salt
        if (StringUtils.hasLength(password) && StringUtils.hasLength(dbPassword)
        && dbPassword.length() == 65 && dbPassword.contains("$") ) {
            // 2.分割数据库中的密码
            String[] strArr = dbPassword.split("\\$");
            // 3.将盐值 和 初始密码传入重载的加盐加密的方法 生成新的密码 然后和数据库中的进行判断
            String salt = strArr[0];
            String finalPasword = encrypt(password,salt);
            if (finalPasword.equals(dbPassword)) {
                return true;
            }
        }
        return false;
    }
}
