package com.example.demo.controller;

import com.example.demo.common.AjaxResult;
import com.example.demo.common.ApplicationVariable;
import com.example.demo.common.StringTools;
import com.example.demo.common.UserSesionTools;
import com.example.demo.entity.ArticleInfo;
import com.example.demo.entity.UserInfo;
import com.example.demo.service.ArticleService;
import com.example.demo.vo.ArticleInfoVO;
import org.apache.catalina.User;
import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.SessionAttribute;

import javax.accessibility.AccessibleHyperlink;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.time.LocalDateTime;
import java.util.List;

/**
 * @author 26568
 * @date 2023-05-20 9:15
 */
@RestController
@RequestMapping("/art")
public class ArticleController {
    @Autowired
    private ArticleService articleService;
    // 添加博客
    @RequestMapping("/add")
    public AjaxResult add(ArticleInfo articleInfo, HttpServletRequest request) {
        // 1.非空校验
        if (articleInfo == null || !StringUtils.hasLength(articleInfo.getTitle()) ||
        !StringUtils.hasLength(articleInfo.getContent())) {
            return AjaxResult.fail(-1,"参数异常");
        }
        // 2.组装数据，得到id
       UserInfo userInfo = UserSesionTools.getLoginUser(request);
        articleInfo.setUid(userInfo.getId());
        // 3.持久化 将结果返回给前端
        int result = articleService.add(articleInfo);
        return AjaxResult.success(result);
    }

    /**
     * 获取文章的详情信息，但是需要鉴权(判断权限的归属人是否是当前登录用户)
     * @param id
     * @param request
     * @return
     */
    @RequestMapping("/getdetailbyid")
    public AjaxResult getDetailByAndUid(Integer id,HttpServletRequest request) {
        // 非空校验
        if (id == null || id <= 0) {
            return AjaxResult.fail(-1,"参数非法");
        }
        UserInfo userInfo = UserSesionTools.getLoginUser(request);
        // 将查询到的博客的所有信息返回给前端
        return AjaxResult.success(articleService.getDetailByAndUid(id, userInfo.getId()));
    }
    // 修改博客
    @RequestMapping("/update")
    public AjaxResult update(ArticleInfo articleInfo,HttpServletRequest request) {
        // 1.非空校验
        if (articleInfo == null || articleInfo.getId() <= 0 ||
        !StringUtils.hasLength(articleInfo.getTitle()) ||
        !StringUtils.hasLength(articleInfo.getContent())) {
            return AjaxResult.fail(-1,"参数有误");
        }
        // 2.获取登录用户的id 填充到articleinfo 对象中(修改需要验证权限)
        UserInfo userInfo = UserSesionTools.getLoginUser(request);
        articleInfo.setUid(userInfo.getId());
        articleInfo.setUpdatetime(LocalDateTime.now());
        int result = articleService.update(articleInfo);
        return AjaxResult.success(result);
    }
    /**
     * 获取当前文章的详细信息，不需要鉴权
     */
    @RequestMapping("/getdetail")
    public AjaxResult getDetail(Integer id) {
        if (id == null || id <= 0) {
            return AjaxResult.fail(-1,"参数有误");
        }
        ArticleInfoVO articleInfoVO = articleService.getDetail(id);
        return AjaxResult.success(articleInfoVO);
    }
    /**
     * 添加阅读量
     */
    @RequestMapping("/addRcount")
    public AjaxResult addRcount(Integer id) {
        if (id == null || id <= 0) {
            return  AjaxResult.fail(-1,"参数错误!");
        }
        int result = articleService.addRcount(id);
        return AjaxResult.success(result);
    }
    /**
     *  得到我的所有博客
     */
    @RequestMapping("/mylist")
    public AjaxResult getListByUid(HttpServletRequest request) {
        UserInfo userInfo = UserSesionTools.getLoginUser(request);
        List<ArticleInfo> list = articleService.getListByUid(userInfo.getId());
        // 遍历所有文章的正文 然后进行截取，由于截取在很多地方都用到，所以放到 comomo包下
        for (ArticleInfo articleInfo:list) {
            articleInfo.setContent(StringTools.getSubtring(articleInfo.getContent(),150));
        }

        return AjaxResult.success(list);
    }
    /**
     * 删除博客
     */
    @RequestMapping("/del")
    public AjaxResult del(Integer id,HttpServletRequest request) {
        UserInfo userInfo = UserSesionTools.getLoginUser(request);
        if (id == null || id <= 0) {
            return AjaxResult.fail(-1,"参数错误");
        }
        int result = articleService.del(id, userInfo.getId());
        return AjaxResult.success(result);
    }

    /**
     * 分页功能实现
     * @param pageSize  共几条博客
     * @param pageIndex 当前下标
     * @return
     */
    @RequestMapping("/getlistbypage")
    public AjaxResult getListByPage(Integer pageIndex,Integer pageSize) {
        // 初始化
        if (pageSize == null || pageSize <= 0 ) {
            pageSize = 2;
        }
        if (pageIndex == null || pageIndex < 1) {
            pageIndex = 1;
        }
        int offset = (pageIndex - 1) *pageSize;
        List<ArticleInfo> list = articleService.getListByPage(pageSize,offset);
        // 将正文进行截取
        // 多线程编发执行
        list.stream().parallel().forEach(item -> {
            item.setContent(StringTools.getSubtring(item.getContent(),150));
        });
        return AjaxResult.success(list);
    }
    // 计算文章的总条数
    @RequestMapping("/getcount")
    public AjaxResult getCount() {
        return AjaxResult.success(articleService.getCount());
    }
}
